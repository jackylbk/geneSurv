if(twoWayinteractions && length(fNames) >1){
twoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
names(twoWayInteractionTerms) <- NULL
}else{twoWayInteractionTerms = NULL}
if(threeWayinteractions && length(fNames) >2){
threeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
names(threeWayInteractionTerms) <- NULL
}else{threeWayInteractionTerms = NULL}
#if(customInteractions && length(fNames) >2){
#   ctwoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
#   names(twoWayInteractionTerms) <- NULL
#   cthreeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
#  names(threeWayInteractionTerms) <- NULL
#  customInteractionTerms = c(ctwoWayInteractionTerms, cthreeWayInteractionTerms)
# names(customInteractionTerms) = NULL
#}else{customInteractionTerms = NULL}
if(customInteractions){
interactions = selectCustomInteractionTerms
}else{
interactions = c(twoWayInteractionTerms, threeWayInteractionTerms)
}
}else{
interactions = NULL
customInteractionTerms= NULL
}
if(strata){
strataVar = strataVariable
newData = cbind.data.frame(newData, data[, strataVar])
names(newData)[dim(newData)[2]] = strataVar
}
newData = cbind.data.frame(newData, data[colnames(data)[!(colnames(data) %in% colnames(newData))]])
if(multipleID != TRUE){
newData$statusVar = newData$statusVar%in%status
newData$id <- 1:nrow(newData)
cut.points <- unique(newData$survivalTime[newData$statusVar == TRUE])
newData <- survSplit(formula = Surv(survivalTime, statusVar)~., data = newData, cut = cut.points, end = "stop",
start = "start", event = "statusVar")
}
newData$statusVar = as.factor(newData$statusVar)%in%status
head(newData)
if(multipleID != TRUE){
newData$statusVar = newData$statusVar%in%status
newData$id <- 1:nrow(newData)
cut.points <- unique(newData$survivalTime[newData$statusVar == TRUE])
newData <- survSplit(formula = Surv(survivalTime, statusVar)~., data = newData, cut = cut.points, end = "stop",
start = "start", event = "statusVar")
}
newData$statusVar = as.factor(newData$statusVar)%in%status
if(timeDependetCovariate && !is.null(selectTimeDependentCovariate)){
timeDependentCovariateNames = list()
for(i in 1:length(selectTimeDependentCovariate)){
if(timeDependentVariableTransformation == "log"){
newData = cbind.data.frame(newData, tmpNames = newData[,selectTimeDependentCovariate[i]]*log(newData[, "survivalTime"]))
}else{
newData = cbind.data.frame(newData, tmpNames = as.numeric(newData[,selectTimeDependentCovariate[i]])*newData[, "survivalTime"])
}
names(newData)[dim(newData)[2]] = timeDependentCovariateNames[[i]] = paste0("time_", selectTimeDependentCovariate[i])
}
timeDependentNames = unlist(timeDependentCovariateNames)
}
if(multipleID){
names(newData)[which(names(newData) == "start")] = "start2"
newData <- newData %>%
group_by(id) %>%
mutate(start = 0:(n() - 1))
newData = as.data.frame(newData)
ind = row.names(newData[newData$start !=0,])
newData$start[as.numeric(ind)] =  newData$survivalTime[as.numeric(ind)-1]
}
if(!is.null(categoricalInput) || !is.null(continuousInput)){
predictors = paste0(names(c(categoricalInput, continuousInput)), collapse = "+")
if(!is.null(interactions)){
if(length(interactions) > 1){
interactions2 = paste(interactions, collapse = "+")
predictors2 = paste(predictors, interactions2, sep = "+", collapse = "+")
}
if(length(interactions) == 1){
predictors2 = paste(predictors, interactions, sep = "+")
}
predictors = predictors2
}
if(timeDependetCovariate && !is.null(selectTimeDependentCovariate)){
if(length(timeDependentNames) > 1){
timeDependents = paste(timeDependentNames, collapse = "+")
}else{
timeDependents =  timeDependentNames
}
predictors = paste(predictors, timeDependents, sep = "+", collapse = "+")
}
if(strata && !is.null(strataVariable)){
strataVars = paste0("strata(",strataVar,")")
predictors = paste(predictors, strataVars, sep = "+", collapse = "+")
}
}else{predictors = 1}
head(newData)
survivalTime= "time"
categoricalInput="group"
continuousInput="age"
statusVariable="status"
status=1
#Statistical
displayDescriptives=TRUE
displayCoefficientEstimates=TRUE
displayModelFit=TRUE
hazardRatio=TRUE
goodnessOfFitTests=TRUE
analysisOfDeviance=TRUE
addInteractions = FALSE
twoWayinteractions = FALSE
threeWayinteractions = FALSE
customInteractions =FALSE
selectCustomInteractionTerms = NULL
timeDependetCovariate = FALSE
selectTimeDependentCovariate = NULL
timeDependentVariableTransformation = "none"
strata = FALSE
strataVariable = NULL
ties = "breslow"
confidenceLevel= 95
#Options
modelSelection="enter"
modelSelectionCriteria = "pValue"
ties ="breslow"
alphaEnter = 0.05
alphaRemove = 0.10
referenceCategory = "first"
storePredictions =FALSE
storeResiduals = FALSE
storeMartingaleResiduals = FALSE
storeSchoenfeldResiduals = FALSE
storeDfBetas = FALSE
CoxPH = TRUE
multipleID = FALSE
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
survivalTime = apply(survivalTime, 2, as.numeric)
}
if(!is.null(categoricalInput)){
categoricalInput = as.data.frame(data[, categoricalInput, drop = FALSE])
categoricalInput = apply(categoricalInput, 2, as.factor)
categoricalInput = as.data.frame(categoricalInput)
}
if(!is.null(continuousInput)){
continuousInput = as.data.frame(data[, continuousInput, drop = FALSE])
continuousInput = apply(continuousInput, 2, as.numeric)
continuousInput = as.data.frame(continuousInput)
}
if(!is.null(statusVariable)){
statusVariable = as.factor(data[, statusVariable])
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(categoricalInput) && !is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime[,1],
statusVar=statusVariable, categoricalInput, continuousInput)
newData = newData[complete.cases(newData),]
}else if(!is.null(categoricalInput) && is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime[,1],
statusVar=statusVariable, categoricalInput)
newData = newData[complete.cases(newData),]
}else if(is.null(categoricalInput) && !is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime = survivalTime[,1],
statusVar=statusVariable, continuousInput)
newData = newData[complete.cases(newData),]
}
if(referenceCategory != "first"){
for(l in 1:dim(categoricalInput)[2]){
newData[, names(categoricalInput)[l]] <- relevel(categoricalInput[,l], ref = levels(categoricalInput[,l])[length(levels(categoricalInput[,l]))])
}
}
if(addInteractions){
if(!is.null(categoricalInput) || !is.null(continuousInput)){
fNames <- names(c(categoricalInput, continuousInput))
}
if(twoWayinteractions && length(fNames) >1){
twoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
names(twoWayInteractionTerms) <- NULL
}else{twoWayInteractionTerms = NULL}
if(threeWayinteractions && length(fNames) >2){
threeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
names(threeWayInteractionTerms) <- NULL
}else{threeWayInteractionTerms = NULL}
#if(customInteractions && length(fNames) >2){
#   ctwoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
#   names(twoWayInteractionTerms) <- NULL
#   cthreeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
#  names(threeWayInteractionTerms) <- NULL
#  customInteractionTerms = c(ctwoWayInteractionTerms, cthreeWayInteractionTerms)
# names(customInteractionTerms) = NULL
#}else{customInteractionTerms = NULL}
if(customInteractions){
interactions = selectCustomInteractionTerms
}else{
interactions = c(twoWayInteractionTerms, threeWayInteractionTerms)
}
}else{
interactions = NULL
customInteractionTerms= NULL
}
if(strata){
strataVar = strataVariable
newData = cbind.data.frame(newData, data[, strataVar])
names(newData)[dim(newData)[2]] = strataVar
}
head(newData)
newData = cbind.data.frame(newData, data[colnames(data)[!(colnames(data) %in% colnames(newData))]])
head(newData)
multipleID != TRUE
if(multipleID != TRUE){
newData$statusVar = newData$statusVar%in%status
newData$id <- 1:nrow(newData)
cut.points <- unique(newData$survivalTime[newData$statusVar == TRUE])
newData <- survSplit(formula = Surv(survivalTime, statusVar)~., data = newData, cut = cut.points, end = "stop",
start = "start", event = "statusVar")
}
newData$statusVar = newData$statusVar%in%status
head(newData)
survivalTime= "time"
categoricalInput="group"
continuousInput="age"
statusVariable="status"
status=1
#Statistical
displayDescriptives=TRUE
displayCoefficientEstimates=TRUE
displayModelFit=TRUE
hazardRatio=TRUE
goodnessOfFitTests=TRUE
analysisOfDeviance=TRUE
addInteractions = FALSE
twoWayinteractions = FALSE
threeWayinteractions = FALSE
customInteractions =FALSE
selectCustomInteractionTerms = NULL
timeDependetCovariate = FALSE
selectTimeDependentCovariate = NULL
timeDependentVariableTransformation = "none"
strata = FALSE
strataVariable = NULL
ties = "breslow"
confidenceLevel= 95
#Options
modelSelection="enter"
modelSelectionCriteria = "pValue"
ties ="breslow"
alphaEnter = 0.05
alphaRemove = 0.10
referenceCategory = "first"
storePredictions =FALSE
storeResiduals = FALSE
storeMartingaleResiduals = FALSE
storeSchoenfeldResiduals = FALSE
storeDfBetas = FALSE
CoxPH = TRUE
multipleID = FALSE
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
survivalTime = apply(survivalTime, 2, as.numeric)
}
if(!is.null(categoricalInput)){
categoricalInput = as.data.frame(data[, categoricalInput, drop = FALSE])
categoricalInput = apply(categoricalInput, 2, as.factor)
categoricalInput = as.data.frame(categoricalInput)
}
if(!is.null(continuousInput)){
continuousInput = as.data.frame(data[, continuousInput, drop = FALSE])
continuousInput = apply(continuousInput, 2, as.numeric)
continuousInput = as.data.frame(continuousInput)
}
if(!is.null(statusVariable)){
statusVariable = as.factor(data[, statusVariable])
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(categoricalInput) && !is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime[,1],
statusVar=statusVariable, categoricalInput, continuousInput)
newData = newData[complete.cases(newData),]
}else if(!is.null(categoricalInput) && is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime[,1],
statusVar=statusVariable, categoricalInput)
newData = newData[complete.cases(newData),]
}else if(is.null(categoricalInput) && !is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime = survivalTime[,1],
statusVar=statusVariable, continuousInput)
newData = newData[complete.cases(newData),]
}
if(referenceCategory != "first"){
for(l in 1:dim(categoricalInput)[2]){
newData[, names(categoricalInput)[l]] <- relevel(categoricalInput[,l], ref = levels(categoricalInput[,l])[length(levels(categoricalInput[,l]))])
}
}
if(addInteractions){
if(!is.null(categoricalInput) || !is.null(continuousInput)){
fNames <- names(c(categoricalInput, continuousInput))
}
if(twoWayinteractions && length(fNames) >1){
twoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
names(twoWayInteractionTerms) <- NULL
}else{twoWayInteractionTerms = NULL}
if(threeWayinteractions && length(fNames) >2){
threeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
names(threeWayInteractionTerms) <- NULL
}else{threeWayInteractionTerms = NULL}
#if(customInteractions && length(fNames) >2){
#   ctwoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
#   names(twoWayInteractionTerms) <- NULL
#   cthreeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
#  names(threeWayInteractionTerms) <- NULL
#  customInteractionTerms = c(ctwoWayInteractionTerms, cthreeWayInteractionTerms)
# names(customInteractionTerms) = NULL
#}else{customInteractionTerms = NULL}
if(customInteractions){
interactions = selectCustomInteractionTerms
}else{
interactions = c(twoWayInteractionTerms, threeWayInteractionTerms)
}
}else{
interactions = NULL
customInteractionTerms= NULL
}
if(strata){
strataVar = strataVariable
newData = cbind.data.frame(newData, data[, strataVar])
names(newData)[dim(newData)[2]] = strataVar
}
newData = cbind.data.frame(newData, data[colnames(data)[!(colnames(data) %in% colnames(newData))]])
if(multipleID != TRUE){
newData$statusVar = newData$statusVar%in%status
newData$id <- 1:nrow(newData)
cut.points <- unique(newData$survivalTime[newData$statusVar == TRUE])
newData <- survSplit(formula = Surv(survivalTime, statusVar)~., data = newData, cut = cut.points, end = "stop",
start = "start", event = "statusVar")
}
newData$statusVar = as.factor(newData$statusVar)%in%status
head(newData)
#Variables
survivalTime= "time"
categoricalInput="group"
continuousInput="age"
statusVariable="status"
status=1
#Statistical
displayDescriptives=TRUE
displayCoefficientEstimates=TRUE
displayModelFit=TRUE
hazardRatio=TRUE
goodnessOfFitTests=TRUE
analysisOfDeviance=TRUE
addInteractions = FALSE
twoWayinteractions = FALSE
threeWayinteractions = FALSE
customInteractions =FALSE
selectCustomInteractionTerms = NULL
timeDependetCovariate = FALSE
selectTimeDependentCovariate = NULL
timeDependentVariableTransformation = "none"
strata = FALSE
strataVariable = NULL
ties = "breslow"
confidenceLevel= 95
#Options
modelSelection="enter"
modelSelectionCriteria = "pValue"
ties ="breslow"
alphaEnter = 0.05
alphaRemove = 0.10
referenceCategory = "first"
storePredictions =FALSE
storeResiduals = FALSE
storeMartingaleResiduals = FALSE
storeSchoenfeldResiduals = FALSE
storeDfBetas = FALSE
CoxPH = TRUE
multipleID = FALSE
if(!is.null(survivalTime)){
survivalTime = as.matrix(data[, survivalTime, drop = FALSE])
survivalTime = apply(survivalTime, 2, as.numeric)
}
if(!is.null(categoricalInput)){
categoricalInput = as.data.frame(data[, categoricalInput, drop = FALSE])
categoricalInput = apply(categoricalInput, 2, as.factor)
categoricalInput = as.data.frame(categoricalInput)
}
if(!is.null(continuousInput)){
continuousInput = as.data.frame(data[, continuousInput, drop = FALSE])
continuousInput = apply(continuousInput, 2, as.numeric)
continuousInput = as.data.frame(continuousInput)
}
if(!is.null(statusVariable)){
statusVariable = as.factor(data[, statusVariable])
}
if(!is.null(status)){
if(is.numeric(status)){status = as.factor(status)}else{status = as.factor(status)}
}
if(!is.null(categoricalInput) && !is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime[,1],
statusVar=statusVariable, categoricalInput, continuousInput)
newData = newData[complete.cases(newData),]
}else if(!is.null(categoricalInput) && is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime= survivalTime[,1],
statusVar=statusVariable, categoricalInput)
newData = newData[complete.cases(newData),]
}else if(is.null(categoricalInput) && !is.null(continuousInput)){
newData = data.frame(id2 =seq(1,dim(survivalTime)[1], 1), survivalTime = survivalTime[,1],
statusVar=statusVariable, continuousInput)
newData = newData[complete.cases(newData),]
}
if(referenceCategory != "first"){
for(l in 1:dim(categoricalInput)[2]){
newData[, names(categoricalInput)[l]] <- relevel(categoricalInput[,l], ref = levels(categoricalInput[,l])[length(levels(categoricalInput[,l]))])
}
}
if(addInteractions){
if(!is.null(categoricalInput) || !is.null(continuousInput)){
fNames <- names(c(categoricalInput, continuousInput))
}
if(twoWayinteractions && length(fNames) >1){
twoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
names(twoWayInteractionTerms) <- NULL
}else{twoWayInteractionTerms = NULL}
if(threeWayinteractions && length(fNames) >2){
threeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
names(threeWayInteractionTerms) <- NULL
}else{threeWayInteractionTerms = NULL}
#if(customInteractions && length(fNames) >2){
#   ctwoWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 2)), paste, collapse = ":"))
#   names(twoWayInteractionTerms) <- NULL
#   cthreeWayInteractionTerms <- sort(sapply(data.frame(combn(fNames, 3)), paste, collapse = ":"))
#  names(threeWayInteractionTerms) <- NULL
#  customInteractionTerms = c(ctwoWayInteractionTerms, cthreeWayInteractionTerms)
# names(customInteractionTerms) = NULL
#}else{customInteractionTerms = NULL}
if(customInteractions){
interactions = selectCustomInteractionTerms
}else{
interactions = c(twoWayInteractionTerms, threeWayInteractionTerms)
}
}else{
interactions = NULL
customInteractionTerms= NULL
}
if(strata){
strataVar = strataVariable
newData = cbind.data.frame(newData, data[, strataVar])
names(newData)[dim(newData)[2]] = strataVar
}
newData = cbind.data.frame(newData, data[colnames(data)[!(colnames(data) %in% colnames(newData))]])
if(multipleID != TRUE){
newData$statusVar = newData$statusVar%in%status
newData$id <- 1:nrow(newData)
cut.points <- unique(newData$survivalTime[newData$statusVar == TRUE])
newData <- survSplit(formula = Surv(survivalTime, statusVar)~., data = newData, cut = cut.points, end = "stop",
start = "start", event = "statusVar")
}
head(newData)
newData$statusVar = as.factor(newData$statusVar)%in%status
head(newData)
if(timeDependetCovariate && !is.null(selectTimeDependentCovariate)){
timeDependentCovariateNames = list()
for(i in 1:length(selectTimeDependentCovariate)){
if(timeDependentVariableTransformation == "log"){
newData = cbind.data.frame(newData, tmpNames = newData[,selectTimeDependentCovariate[i]]*log(newData[, "survivalTime"]))
}else{
newData = cbind.data.frame(newData, tmpNames = as.numeric(newData[,selectTimeDependentCovariate[i]])*newData[, "survivalTime"])
}
names(newData)[dim(newData)[2]] = timeDependentCovariateNames[[i]] = paste0("time_", selectTimeDependentCovariate[i])
}
timeDependentNames = unlist(timeDependentCovariateNames)
}
if(multipleID){
names(newData)[which(names(newData) == "start")] = "start2"
newData <- newData %>%
group_by(id) %>%
mutate(start = 0:(n() - 1))
newData = as.data.frame(newData)
ind = row.names(newData[newData$start !=0,])
newData$start[as.numeric(ind)] =  newData$survivalTime[as.numeric(ind)-1]
}
if(!is.null(categoricalInput) || !is.null(continuousInput)){
predictors = paste0(names(c(categoricalInput, continuousInput)), collapse = "+")
if(!is.null(interactions)){
if(length(interactions) > 1){
interactions2 = paste(interactions, collapse = "+")
predictors2 = paste(predictors, interactions2, sep = "+", collapse = "+")
}
if(length(interactions) == 1){
predictors2 = paste(predictors, interactions, sep = "+")
}
predictors = predictors2
}
if(timeDependetCovariate && !is.null(selectTimeDependentCovariate)){
if(length(timeDependentNames) > 1){
timeDependents = paste(timeDependentNames, collapse = "+")
}else{
timeDependents =  timeDependentNames
}
predictors = paste(predictors, timeDependents, sep = "+", collapse = "+")
}
if(strata && !is.null(strataVariable)){
strataVars = paste0("strata(",strataVar,")")
predictors = paste(predictors, strataVars, sep = "+", collapse = "+")
}
}else{predictors = 1}
head(newData)
formula = as.formula(paste0("Surv(start, survivalTime, statusVar ==  TRUE) ~ ", predictors))
current = coxph(formula, data=newData, ties = ties)
current
?coxph
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/")
