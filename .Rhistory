newData
newVars = sapply(colnames(newData), function(x){
newVar=as.factor(newData[,x])
level = as.numeric(levels(newVar))
nonStatus = level[!(level %in% status)]
newVar <- factor(newData[,x], levels = c(status, nonStatus))
newVar2 = as.data.frame(newVar, colnames = NULL)
colnames(newVar2) = x
newVar2
})
if(!is.null(newData)){
newVars = sapply(colnames(newData), function(x){
newVar=as.factor(newData[,x])
level = as.numeric(levels(newVar))
nonStatus = level[!(level %in% status)]
newVar <- factor(newData[,x], levels = c(status, nonStatus))
newVar2 = as.data.frame(newVar, colnames = NULL)
colnames(newVar2) = x
newVar2
})
names(newVars) = colnames(newData)
newVariables = do.call(cbind.data.frame, newVars)
tbl = table(newVariables)
}
newData = cbind.data.frame(diseaseVariables)
newData = newData[complete.cases(newData),]
newVars = sapply(colnames(newData), function(x){
newVar=as.factor(newData[,x])
level = as.numeric(levels(newVar))
nonStatus = level[!(level %in% status)]
newVar <- factor(newData[,x], levels = c(status, nonStatus))
newVar2 = as.data.frame(newVar, colnames = NULL)
colnames(newVar2) = x
newVar2
})
newVar2
colnames(newData)
newData
tbl(newData)
tbl = table(newData)
RiskMeasures = epiR::epi.2by2(dat = tbl, method = "cohort.count", conf.level = confidenceLevel/100, outcome = "as.columns")
?epiR::epi.2by2
confidenceLevel
tbl
epiR::epi.2by2(dat = tbl, method = "cohort.count", conf.level = confidenceLevel/100, outcome = "as.columns")
tbl
status
a = riskInExposedGroup*100
b = 100-a
c= riskInUnexposedGroup*100
d=100-c
tbl = as.table(matrix(c(a,c,b,d),2,2))
tbl
matrix(c(a,c,b,d),2,2)
as.table(matrix(c(a,c,b,d),2,2))
newData = cbind.data.frame(diseaseVariables)
newData = newData[complete.cases(newData),]
as.table(newData)
as.table(table(newData))
as.table(as.matrix(newData))
as.table(as.matrix(table(newData)))
as.matrix(table(newData))
table(newData)
as.matrix(table(newData))
newData
tbl
RiskMeasures = epiR::epi.2by2(dat = tbl, method = "cohort.count", conf.level = confidenceLevel/100, outcome = "as.columns")
RiskMeasures
IR_Exposed = formatC(as.numeric(RiskMeasures$tab[1,4])/100, digits = 3, format="f")
IR_Unexposed = formatC(as.numeric(RiskMeasures$tab[2,4])/100, digits = 3, format="f")
IRt = rbind.data.frame("Incidence rate(E+)" = IR_Exposed, "Incidence rate(E-)" = IR_Unexposed)
incidenceRate = cbind.data.frame(rownames(IRt), IRt)
colnames(incidenceRate) = c("Measure", "Value")
incidenceRate
tbl
tbl(newData)
as.matrix(newData)
tbl(newData)
table(newData)
as.matrix(table(newData))
as.table(table(newData))
colnames(as.table(table(newData)))
as.matrix(as.table(table(newData)))
?as.matrix
as.matrix(as.table(table(newData)),byrow=T)
as.matrix(as.table(table(newData)),byrow=F)
as.matrix(table(newData))
as.matrix(table(newData), byrow=T)
library(outliers)
?cochran.test()
set.seed(1234)
x=rnorm(100)
d=data.frame(x=x,group=rep(1:10,10))
head(d)
d
cochran.test(x~group,d)
c = cochran.test(x~group,d)
c$estimate
sum(c$estimate)
max(c$estimate)
max(c$estimate)/sum(c$estimate)
cochran.test(x~group,d,inlying=TRUE)
x=runif(5)
cochran.test(x,rep(5,5))
cochran.test(x,rep(100,5))
x=rnorm(100)
d=data.frame(x=x,group=rep(1:10,10))
cochran.test(x~group,d)
cochran.test(x~group,d)
x
d
x2 = x[x$d == 1,]
x2 = d[d$group == 1,]
x2
sd(x2$x)
cochran.test(x~group,d)
x=rnorm(100)
d=data.frame(x=x,group=rep(1:10,10))
cochran.test(x~group,d)
x2 = d[d$group == 1,]
sd(x2$x)
x2
cochran.test
object = d~x
object = x~group
data = d
missing(data)
max(vars)
data <- environment(object)
data
bn <- as.character(attr(terms(object), "variables")[-1])
bn
by.factor <- as.factor(data[[bn[2]]])
by.factor
vars <- tapply(data[[bn[1]]], by.factor, var)
data[[bn[1]]]
by.factor
bn <- as.character(attr(terms(object), "variables")[-1])
bn
by.factor <- as.factor(data[[bn[2]]])
by.factor
data[[bn[2]]]
bn[2]
head(data)
d
data = d
data <- environment(object)
bn <- as.character(attr(terms(object), "variables")[-1])
by.factor <- as.factor(data[[bn[2]]])
by.factor
data =d
bn <- as.character(attr(terms(object), "variables")[-1])
by.factor <- as.factor(data[[bn[2]]])
by.factor
vars <- tapply(data[[bn[1]]], by.factor, var)
vars
by.factor
sd(x2$x)
sd(x2$x)^2
bn <- as.character(attr(terms(object), "variables")[-1])
by.factor <- as.factor(data[[bn[2]]])
vars <- tapply(data[[bn[1]]], by.factor, var)
names(vars) <- levels(by.factor)
k <- nlevels(by.factor)
df <- length(data[[bn[1]]])/k
df
k
length(data[[bn[1]]])/k
value <- max(vars)/sum(vars)
value
cochran.test(x~group,d)
group <- levels(by.factor)[which(vars == max(vars))]
method <- "Cochran test for outlying variance"
?pcochran
data = data.frame(x=x,group=rep(1:10,10))
data[1]
data[,1]
data = data.frame(x=x,group=rep(1:10,10))
vars <- tapply(data[,1], as.factor(data$group), var)
vars
analyte = data[1,]
replicate = as.factor(data[2,])
data[2,]
analyte = data[,1]
replicate = as.factor(data[,2])
replicate
vars <- tapply(analyte, replicate, var)
names(vars) <- levels(replicate)
k <- nlevels(replicate)
k
df <- length(analyte)/k
df
value <- max(vars)/sum(vars)
group <- levels(by.factor)[which(vars == max(vars))]
group
levels(by.factor)[which(vars == max(vars))]
group <- levels(replicate)[which(vars == max(vars))]
method <- "Cochran test for outlying variance"
alt <- paste("Group", group, "has outlying variance")
alt
pval <- 1 - pcochran(value, df, k)
pval
cochran.test(x~group,data)
rm(list = ls())
set.seed(1234)
x=rnorm(100)
data = data.frame(x=x,group=rep(1:10,10))
analyte = data[,1]
replicate = as.factor(data[,2])
vars <- tapply(analyte, replicate, var)
names(vars) <- levels(replicate)
k <- nlevels(replicate)
df <- length(analyte)/k
value <- max(vars)/sum(vars)
group <- levels(replicate)[which(vars == max(vars))]
method <- "Cochran test for outlying variance"
alt <- paste("Group", group, "has outlying variance")
pval <- 1 - pcochran(value, df, k)
pval
fit <- survfit(Surv(time, status) ~ sex, data = lung)
library(survMisc)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
autoplot(fit, xlab = "Time", ylab = "Survival")
autoplot(fit)
autoplot(fit)
autoplot(fit,
type="fill", survSize=2, palette="Pastel1",
fillLineSize=0.1, alpha=0.4)$plot
autoplot(fit,
type="fill", survSize=2, palette="Pastel1",
fillLineSize=0.1, alpha=0.4)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
,
fit <- survfit(Surv(time, status) ~ sex, data = lung)
autoplot(fit, xlab = "Time", ylab = "Survival")$plot
autoplot(fit, xlab = "Time", ylab = "Survival", ylimits = c(0,1))$plot
autoplot(fit, xlab = "Time", ylab = "Survival", ylimit = c(0,1))$plot
?survfit
library(survival)
library(ggplot2)
library(GGally)
data(lung)
sf.sex <- survfit(Surv(time, status) ~ sex, data = lung)
pl.sex <- ggsurv(sf.sex, CI = TRUE)
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) +
geom_ribbon(aes(ymin=low,ymax=up,fill=group),alpha=0.3)
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE)
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability")
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw()
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
scale_fill_discrete(name = "Factor")
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
labs(linetype='custom title')
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
labs('custom title')
pl.sex
head(lung)
names(lung)[5]
names(lung)[5]="factor"
sf.sex <- survfit(Surv(time, status) ~ sex, data = lung)
sf.sex <- survfit(Surv(time, status) ~ factor, data = lung)
pl.sex <- ggsurv(sf.sex, CI = TRUE)
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw()
pl.sex
getwd()
ggsave("~/Desktop/", height = 9, width = 12)
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw()
pl.sex
ggsave("~/Desktop/", height = 9, width = 12)
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.X = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.X = element_text(size = 20))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
geom_line(size=2)
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
geom_line(size=1)
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE, size=1) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
?ggsurv
pl.sex <- ggsurv(sf.sex, CI = FALSE, size.est =1 ) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(legend.text= element_text(colour = 'black', size = 20),
legend.text = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(legend.text= element_text(colour = 'black', size = 20),
legend.title = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(legend.text= element_text(colour = 'black', size = 20),
legend.title = element_text(size = 15,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(legend.text= element_text(colour = 'black', size = 15),
legend.title = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
?ggsurv
pl.sex <- ggsurv(sf.sex, CI = FALSE, size.est = 0.5) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 20),
axis.title.y = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 20),
axis.title.x = element_text(size = 20,
hjust = 0.5, vjust = 0.2)) +
theme(legend.text= element_text(colour = 'black', size = 15),
legend.title = element_text(size = 20,
hjust = 0.5, vjust = 0.2))
pl.sex
pl.sex <- ggsurv(sf.sex, CI = FALSE) + xlab("Follow-up Time") + ylab("Survival Probability") +theme_bw() +
theme(axis.text.y = element_text(colour = 'black', size = 15),
axis.title.y = element_text(size = 15,
hjust = 0.5, vjust = 0.2)) +
theme(axis.text.x = element_text(colour = 'black', size = 15),
axis.title.x = element_text(size = 15,
hjust = 0.5, vjust = 0.2)) +
theme(legend.text= element_text(colour = 'black', size = 15),
legend.title = element_text(size = 15,
hjust = 0.5, vjust = 0.2))
pl.sex
install.packages("~/Downloads/survival_2.38-3.tar.gz", repos = NULL, type = "source")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
install.packages("shiny")
shiny::runApp("~/Dropbox/")
shiny::runApp("~/Downloads//")
library(shinydashboard)
shiny::runApp("~/Downloads//")
?dashboardHeader
shiny::runApp("~/Downloads//")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
?datatable
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
data = read.table("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/www/data/GSE10143.txt")
vars = apply(data,2,var)
idx = order(vars, decreasing = TRUE)
idx
vars
apply(data,2,var)
warnings()
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
colnames(data)
colnames(data) %in% "V992"
colnames(data) %in% c("V992","V1000")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
?numericInput
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
vars = apply(data,2,var)
warnings()
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
?nearZeroVar
nearZeroVar(iris[, -5], saveMetrics = TRUE)
data(BloodBrain)
nearZeroVar(bbbDescr)
nearZeroVar(bbbDescr, names = TRUE)
nearZeroVar(iris[, -5], saveMetrics = TRUE)
data(BloodBrain)
nearZeroVar(bbbDescr)
nearZeroVar(bbbDescr, names = TRUE, saveMetrics = F)
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
nearZeroVar(iris[, -5], saveMetrics = TRUE)
data(BloodBrain)
nearZeroVar(bbbDescr)
nearZeroVar(bbbDescr, names = TRUE)
as.data.frame(nearZeroVar(bbbDescr, names = TRUE))
as.data.frame(features = nearZeroVar(bbbDescr, names = TRUE))
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
?log
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
data = iris[-5]
head(data)
head(data+1)
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
log(1)
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
data = iris[-5]
data
data2=scale(data, center = T, scale = T)
log(data2)
head(data2)
head(data2+min(data, na.rm=TRUE)+1)
min(data, na.rm=TRUE)
max(data)
data
min(data2, na.rm=TRUE)
log(data+abs(min(data, na.rm=TRUE))+1)
log(data2+abs(min(data2, na.rm=TRUE))+1)
shiny::runApp("~/Dropbox/GSD/Studies/Web-Tools(Devel)/geneSurv/")
