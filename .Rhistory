auc = as.data.frame(t(rocArea2))
names(auc) = c("AUC", "p value")
}
}else{auc = NULL}
if("classificationPerformanceAssessment"  %in% statistics){
if(discriminantAnalysisMethod == "linear"){
tbl <- table(ldaResultCV$class, responseVarFactor)
}
if(discriminantAnalysisMethod == "quadratic"){
tbl <- table(qdaResultCV$class,responseVarFactor)
}
if(discriminantAnalysisMethod == "flexible"){
tbl <- table(predict(fdaResult, type = "class"),responseVarFactor)
}
classPerfAssess = as.data.frame(t(formatC(confusionMatrix(tbl, positive = positive)$byClass, digits=3, format= "f")))[1:4]
classPerfAssess$accuracyRate = as.numeric(formatC(sum(diag(tbl))/sum(tbl), digits = 3, format = "f"))
precision = as.numeric(levels(classPerfAssess[[1]])[classPerfAssess[[1]]])
recall = as.numeric(levels(classPerfAssess[[3]])[classPerfAssess[[3]]])
classPerfAssess$f1Score = as.numeric(formatC((2*precision*recall)/(precision+recall), digits = 3, format = "f"))
classPerfAssess$mcc = as.numeric(formatC((tbl[1,1]*tbl[2,2]-tbl[1,2]*tbl[2,1])/sqrt((tbl[1,1]+tbl[1,2])*(tbl[1,1]+tbl[2,1])*(tbl[2,2]+tbl[1,2])*(tbl[2,2]+tbl[2,1])), digits = 3, format = "f"))
classPerfAssess$kappa = as.numeric(formatC(Kappa(tbl)$Unweighted[[1]], digits = 3))
names(classPerfAssess) = c("Sensitivity", "Specificity", "Positive Predictive Value", "Negative Predictive Value", "Accuracy rate", "F1 score", "MCC", "Kappa")
classPerfAssess2 =  as.data.frame(t(classPerfAssess))
classificationPerformanceAssessment = cbind(rownames(classPerfAssess2), classPerfAssess2)
rownames(classificationPerformanceAssessment) = NULL
colnames(classificationPerformanceAssessment) = c("Measure", "Value")
}else{classificationPerformanceAssessment = NULL}
if("multivariateNormality"  %in% statistics){
df = as.data.frame(cbind(responseVar, continiousVars))
splitGroup = split(df[,-1], df[,1])
mvn = lapply(X = splitGroup, FUN = function(x) mardiaTest(x, qqplot = FALSE))
mvn2 = lapply(X = mvn, FUN = function(x) formatC(c(x@g1p, x@chi.skew, x@p.value.skew,
x@g2p, x@z.kurtosis, x@p.value.kurt,
x@chi.small.skew, x@p.value.small), digits = 3, format = "f"))
mvnRes = data.frame(matrix(NA, nrow = length(splitGroup), ncol=10))
for(m in 1:length(splitGroup)){
mvnRes[m, 3:10] = mvn2[[m]]
mvnRes[m,1] = names(splitGroup)[m]
mvnRes[m,2] = paste(colnames(continiousVars), collapse = "-")
}
colnames(mvnRes) = c("Group","Variables", "g1p", "X2.skew", "p.value.skew", "g2p", "z.kurt", "p.value.kurt","X2.small.skew", "p.value.small")
}else{mvnRes = NULL}
if("boxMTest" %in% statistics){
boxM = BoxMTest(continiousVars, responseVarFactor, alpha = 1-confidenceLevel/100)
testStatistics = boxM$MBox
Fvalue = boxM$F
pValue = boxM$pValue
boxMresult = as.data.frame(cbind(as.numeric(formatC(testStatistics, digits = 3, format = "f")), as.numeric(formatC(Fvalue, digits = 3, format = "f")), as.numeric(formatC(pValue, digits = 3, format = "f"))))
colnames(boxMresult) = c("Test statistic", "F value", "p value")
rownames(boxMresult) = NULL
}else{boxMresult = NULL}
if("missclassifiedCases"  %in% statistics){
if(discriminantAnalysisMethod == "linear"){
predicted = as.numeric(levels(ldaResultCV$class)[ldaResultCV$class])
}
else if(discriminantAnalysisMethod == "quadratic"){
predicted = as.numeric(levels(qdaResultCV$class)[qdaResultCV$class])
}
else if(discriminantAnalysisMethod == "flexible"){
predicted = predict(fdaResult)
}
combinedDF = data.frame(continiousVars, actualClass =as.numeric(levels(responseVarFactor)[responseVarFactor]), predictedClass = predicted)
missClassifiedCasesResult = combinedDF[combinedDF$actual != combinedDF$predicted,]
names(missClassifiedCasesResult)[c(dim(missClassifiedCasesResult)[2]-1,dim(missClassifiedCasesResult)[2])] = c("Actual class", "Predicted class")
}else{missClassifiedCasesResult = NULL}
if("probabilities" %in% store){
if(discriminantAnalysisMethod == "linear"){
probabilities = as.data.frame((formatC(predict(ldaResult)$posterior, digits = 3, format = "f")))
}
if(discriminantAnalysisMethod == "quadratic"){
probabilities = as.data.frame((formatC(predict(qdaResult)$posterior, digits = 3, format = "f")))
}
if(discriminantAnalysisMethod == "flexible"){
probabilities = predict(fdaResult, type = "posterior")
rownames(probabilities) = 1:dim(probabilities)[1]
probabilities = as.data.frame(formatC(probabilities, digits = 3, format="f"))
}
}else{probabilities = NULL}
if("groupMembership" %in% store){
if(discriminantAnalysisMethod == "linear"){
groupMembership = data.frame(levels(predict(ldaResult)$class)[predict(ldaResult)$class])
colnames(groupMembership) = "Predicted class"
}
if(discriminantAnalysisMethod == "quadratic"){
groupMembership = data.frame(levels(predict(qdaResult)$class)[predict(qdaResult)$class])
colnames(groupMembership) = "Predicted class"
}
if(discriminantAnalysisMethod == "flexible"){
groupMembership = data.frame(levels(predict(fdaResult, type = "class"))[predict(fdaResult, type = "class")])
colnames(groupMembership) = "Predicted class"
}
} else{groupMembership = NULL}
if("discriminantScores" %in% store && discriminantAnalysisMethod == "quadratic"){
if(discriminantAnalysisMethod == "linear"){
discriminantScores = as.data.frame((formatC(predict(ldaResult)$x, digits = 3, format = "f")))
colnames(discriminantScores) = "Discriminant scores"
}
if(discriminantAnalysisMethod == "quadratic"){
"No discriminant scores"
}
if(discriminantAnalysisMethod == "flexible"){
discriminantScores = as.data.frame(formatC(predict(fdaResult, type = "variates")[,1], digits = 3, format = "f"))
rownames(discriminantScores) = 1:dim(discriminantScores)[1]
colnames(discriminantScores) = "Discriminant scores"
}
}else{discriminantScores = NULL}
if(correlations){
correlationResults = as.data.frame(formatC(cor(continiousVars), digits = 3, format = "f"))
correlationResults = cbind("#" = rownames(correlationResults), correlationResults)
rownames(correlationResults) = NULL
}else{correlationResults = NULL}
if(covariances){
covarianceResults = as.data.frame(formatC(cov(continiousVars), digits = 3, format = "f"))
covarianceResults = cbind("#" = rownames(covarianceResults), covarianceResults)
rownames(covarianceResults) = NULL
} else{covarianceResults = NULL}
if(descriptives){
obj = df
variable = colnames(continiousVars)
group.var = colnames(responseVar)
df[,group.var] = as.factor(df[,group.var])
descriptiveStatistics = lapply(variable, function(x) {
tmp = getDescriptiveResultsDiscriminantAnalysis(obj = obj, variable = x,  group.var = group.var,
confidence.level = confidenceLevel/100,
number.of.decimals = 3)
return(tmp)
})
names(descriptiveStatistics) = variable
}
result = list(tableResult = list(Descriptives = descriptiveStatistics, Correlation = correlationResults,
Covariance = covarianceResults),
testResult = list(ClassificationTable = classificationTable, CanonicalCoefficients = canonicalCoefficients,
ROCAnalysis = auc, classificationPerformanceAssessment = classificationPerformanceAssessment,
MultivariateNormality = mvnRes, BoxMTest = boxMresult,
MisclassifiedCases = missClassifiedCasesResult,
store = list(Probabilities = probabilities, GroupMembership = groupMembership,
DiscriminantScores = discriminantScores)),
plotResult = "under construction...")
return(result)
}
discriminantResults = coreDiscriminantAnalysis (responseVar, continiousVars, positive = NULL, discriminantAnalysisMethod = "quadratic",
statistics = c("canonicalCoefficients", "classificationTable", "roc", "classificationPerformanceAssessment",
"multivariateNormality", "boxMTest", "missclassifiedCases"), proportionalToGroupSize = TRUE, confidenceLevel = 95,
alternative = "two.sided", descriptives = TRUE, correlations = TRUE, covariances = TRUE, store = c("probabilities", "groupMembership", "discriminantScores"))
discriminantResults
discriminantResults = coreDiscriminantAnalysis (responseVar, continiousVars, positive = NULL, discriminantAnalysisMethod = "quadratic",
statistics = c("canonicalCoefficients", "classificationTable", "roc", "classificationPerformanceAssessment",
"multivariateNormality", "boxMTest", "missclassifiedCases"), proportionalToGroupSize = TRUE, confidenceLevel = 95,
alternative = "two.sided", descriptives = TRUE, correlations = TRUE, covariances = TRUE, store = c("probabilities", "groupMembership", "discriminantScores"))
discriminantResults = coreDiscriminantAnalysis (responseVar, continiousVars, positive = NULL, discriminantAnalysisMethod = "quadratic",
statistics = c("canonicalCoefficients", "classificationTable", "roc", "classificationPerformanceAssessment",
"multivariateNormality", "boxMTest", "missclassifiedCases"), proportionalToGroupSize = TRUE, confidenceLevel = 95,
alternative = "two.sided", descriptives = TRUE, correlations = TRUE, covariances = TRUE, store = c("probabilities", "groupMembership"))
discriminantResults
?colMeans
data = mtcars
# write.table(data, "~/Desktop/iris.txt", row.names = F, quote=F, sep="\t")
# data = read.table("~/Desktop/mtcars.txt", header=T)
responseVar = "vs"
continiousVars = c("mpg", "disp",  "hp", "wt")
if(!is.null(responseVar) && !is.null(continiousVars)){
tmpResponseVar = data[, responseVar, drop = FALSE]
tmpContiniousVars = data[, continiousVars, drop = FALSE]
df = cbind(tmpResponseVar, tmpContiniousVars)
newData = df[complete.cases(df),]
responseVarFactor = as.factor(newData[, responseVar])
responseVar = as.matrix(newData[, responseVar, drop = FALSE])
continiousVars = as.matrix(newData[, continiousVars, drop = FALSE])
df = data.frame(obs = 1:dim(continiousVars)[1], as.factor(responseVar[,1]), continiousVars)
rownames(df) = df$obs
colnames(df)[-1] = c(colnames(responseVar), colnames(continiousVars))
if(proportionalToGroupSize){
proportions = prop.table(table(responseVarFactor))
}else{
proportions = rep(1/length(levels(responseVarFactor)),length(levels(responseVarFactor)))
}
}
library(MASS)
library(verification)
library(caret)
library(MVN)
library(mda)
library(vcd)
data = mtcars
responseVar = "vs"
continiousVars = c("mpg", "disp",  "hp", "wt")
positive = NULL
discriminantAnalysisMethod = "linear"
statistics = c("canonicalCoefficients", "classificationTable", "roc", "classificationPerformanceAssessment",
"multivariateNormality", "boxMTest", "missclassifiedCases")
proportionalToGroupSize = TRUE
confidenceLevel = 95
store = c("probabilities", "groupMembership")
covariances = TRUE
correlations = TRUE
descriptives = TRUE
alternative = "two.sided"
if(!is.null(responseVar) && !is.null(continiousVars)){
tmpResponseVar = data[, responseVar, drop = FALSE]
tmpcontiniousVars = data[, continiousVars, drop = FALSE]
df = cbind(tmpResponseVar, tmpcontiniousVars)
newData = df[complete.cases(df),]
responseVarFactor = as.factor(newData[, responseVar])
responseVar = as.matrix(newData[, responseVar, drop = FALSE])
continiousVars = as.matrix(newData[, continiousVars, drop = FALSE])
df = data.frame(obs = 1:dim(continiousVars)[1], as.factor(responseVar[,1]), continiousVars)
rownames(df) = df$obs
colnames(df)[-1] = c(colnames(responseVar), colnames(continiousVars))
if(proportionalToGroupSize){
proportions = prop.table(table(responseVarFactor))
}else{
proportions = rep(1/length(levels(responseVarFactor)),length(levels(responseVarFactor)))
}
}
if(discriminantAnalysisMethod == "linear"){
ldaResult <- lda(x = continiousVars, grouping = responseVarFactor, prior = c(proportions) )
ldaResultCV <- lda(x = continiousVars, grouping = responseVarFactor, CV = TRUE, prior = proportions)
}else if(discriminantAnalysisMethod == "quadratic"){
qdaResult <- qda(x = continiousVars, grouping = responseVarFactor, prior = proportions)
qdaResultCV <- qda(x = continiousVars, grouping = responseVarFactor, CV = TRUE, prior = proportions)
}else if(discriminantAnalysisMethod == "flexible"){
fdaResult <- fda(responseVarFactor ~ continiousVars)
}
if("canonicalCoefficients" %in% statistics){
if(discriminantAnalysisMethod == "linear"){
canonicalCoefficients = as.data.frame(formatC(ldaResult$scaling, digits = 3, format = "f"))
canonicalCoefficients = as.data.frame(cbind(c(colnames(continiousVars)), formatC(as.numeric(levels(canonicalCoefficients[,1])[canonicalCoefficients[,1]]), digits = 3, format = "f")))
colnames(canonicalCoefficients) = c("Variable", "Coefficient")
rownames(canonicalCoefficients) = NULL
}
if(discriminantAnalysisMethod == "quadratic"){
qdf = as.data.frame(formatC(qdaResult$scaling, digits = 3, format = "f"))
canonicalCoefficients = cbind(Variable = rownames(qdf), qdf)
rownames(canonicalCoefficients) = NULL
}
if(discriminantAnalysisMethod == "flexible"){
canonicalCoefficients = coef.fda(fdaResult)
canonicalCoefficients = as.data.frame(cbind(c("Intercept", colnames(continiousVars)), formatC(canonicalCoefficients, digits = 3, format = "f")))
colnames(canonicalCoefficients) = c("Variable", "Coefficient")
rownames(canonicalCoefficients) = NULL
}
}else{canonicalCoefficients = NULL}
if("classificationTable" %in% statistics){
if(discriminantAnalysisMethod == "linear"){
cTable <- table(ldaResultCV$class, responseVarFactor)
}
if(discriminantAnalysisMethod == "quadratic"){
cTable <- table(qdaResultCV$class,responseVarFactor)
}
if(discriminantAnalysisMethod == "flexible"){
cTable <- table(predict(fdaResult),responseVarFactor)
}
cTable2 = tableToDataFrame(cTable)
classificationTable = cbind('#' = rownames(cTable), cTable2)
rownames(classificationTable) = NULL
}else{classificationTable = NULL}
if("roc" %in% statistics){
if(discriminantAnalysisMethod == "linear"){
prob = as.data.frame(ldaResultCV$posterior)
prob2 = prob[,1]
rocArea = as.data.frame(roc.area(as.numeric(levels(responseVarFactor))[responseVarFactor], prob2))[c(-2:-4)]
rocArea2 = apply(rocArea, 2, function(x) as.numeric(formatC(x, digits=3, format = "f")))
if(rocArea2[[1]] < 0.5){
prob2 = prob[,2]
rocArea = as.data.frame(roc.area(as.numeric(levels(responseVarFactor))[responseVarFactor], prob2))[c(-2:-4)]
rocArea2 = apply(rocArea, 2, function(x) as.numeric(formatC(x, digits=3, format = "f")))
}
auc = as.data.frame(t(rocArea2))
names(auc) = c("AUC", "p value")
}
if(discriminantAnalysisMethod == "quadratic"){
prob = as.data.frame(qdaResultCV$posterior)
prob2 = prob[,1]
rocArea = as.data.frame(roc.area(as.numeric(levels(responseVarFactor))[responseVarFactor], prob2))[c(-2:-4)]
rocArea2 = apply(rocArea, 2, function(x) as.numeric(formatC(x, digits=3, format = "f")))
if(rocArea2[[1]] < 0.5){
prob2 = prob[,2]
rocArea = as.data.frame(roc.area(as.numeric(levels(responseVarFactor))[responseVarFactor], prob2))[c(-2:-4)]
rocArea2 = apply(rocArea, 2, function(x) as.numeric(formatC(x, digits=3, format = "f")))
}
auc = as.data.frame(t(rocArea2))
names(auc) = c("AUC", "p value")
}
if(discriminantAnalysisMethod == "flexible"){
prob = predict(fdaResult, type = "posterior")
prob2 = prob[,1]
rocArea = as.data.frame(roc.area(as.numeric(levels(responseVarFactor))[responseVarFactor], prob2))[c(-2:-4)]
rocArea2 = apply(rocArea, 2, function(x) as.numeric(formatC(x, digits=3, format = "f")))
if(rocArea2[[1]] < 0.5){
prob2 = prob[,2]
rocArea = as.data.frame(roc.area(as.numeric(levels(responseVarFactor))[responseVarFactor], prob2))[c(-2:-4)]
rocArea2 = apply(rocArea, 2, function(x) as.numeric(formatC(x, digits=3, format = "f")))
}
auc = as.data.frame(t(rocArea2))
names(auc) = c("AUC", "p value")
}
}else{auc = NULL}
if("classificationPerformanceAssessment"  %in% statistics){
if(discriminantAnalysisMethod == "linear"){
tbl <- table(ldaResultCV$class, responseVarFactor)
}
if(discriminantAnalysisMethod == "quadratic"){
tbl <- table(qdaResultCV$class,responseVarFactor)
}
if(discriminantAnalysisMethod == "flexible"){
tbl <- table(predict(fdaResult, type = "class"),responseVarFactor)
}
classPerfAssess = as.data.frame(t(formatC(confusionMatrix(tbl, positive = positive)$byClass, digits=3, format= "f")))[1:4]
classPerfAssess$accuracyRate = as.numeric(formatC(sum(diag(tbl))/sum(tbl), digits = 3, format = "f"))
precision = as.numeric(levels(classPerfAssess[[1]])[classPerfAssess[[1]]])
recall = as.numeric(levels(classPerfAssess[[3]])[classPerfAssess[[3]]])
classPerfAssess$f1Score = as.numeric(formatC((2*precision*recall)/(precision+recall), digits = 3, format = "f"))
classPerfAssess$mcc = as.numeric(formatC((tbl[1,1]*tbl[2,2]-tbl[1,2]*tbl[2,1])/sqrt((tbl[1,1]+tbl[1,2])*(tbl[1,1]+tbl[2,1])*(tbl[2,2]+tbl[1,2])*(tbl[2,2]+tbl[2,1])), digits = 3, format = "f"))
classPerfAssess$kappa = as.numeric(formatC(Kappa(tbl)$Unweighted[[1]], digits = 3))
names(classPerfAssess) = c("Sensitivity", "Specificity", "Positive Predictive Value", "Negative Predictive Value", "Accuracy rate", "F1 score", "MCC", "Kappa")
classPerfAssess2 =  as.data.frame(t(classPerfAssess))
classificationPerformanceAssessment = cbind(rownames(classPerfAssess2), classPerfAssess2)
rownames(classificationPerformanceAssessment) = NULL
colnames(classificationPerformanceAssessment) = c("Measure", "Value")
}else{classificationPerformanceAssessment = NULL}
if("multivariateNormality"  %in% statistics){
df = as.data.frame(cbind(responseVar, continiousVars))
splitGroup = split(df[,-1], df[,1])
mvn = lapply(X = splitGroup, FUN = function(x) mardiaTest(x, qqplot = FALSE))
mvn2 = lapply(X = mvn, FUN = function(x) formatC(c(x@g1p, x@chi.skew, x@p.value.skew,
x@g2p, x@z.kurtosis, x@p.value.kurt,
x@chi.small.skew, x@p.value.small), digits = 3, format = "f"))
mvnRes = data.frame(matrix(NA, nrow = length(splitGroup), ncol=10))
for(m in 1:length(splitGroup)){
mvnRes[m, 3:10] = mvn2[[m]]
mvnRes[m,1] = names(splitGroup)[m]
mvnRes[m,2] = paste(colnames(continiousVars), collapse = "-")
}
colnames(mvnRes) = c("Group","Variables", "g1p", "X2.skew", "p.value.skew", "g2p", "z.kurt", "p.value.kurt","X2.small.skew", "p.value.small")
}else{mvnRes = NULL}
if("boxMTest" %in% statistics){
boxM = BoxMTest(continiousVars, responseVarFactor, alpha = 1-confidenceLevel/100)
testStatistics = boxM$MBox
Fvalue = boxM$F
pValue = boxM$pValue
boxMresult = as.data.frame(cbind(as.numeric(formatC(testStatistics, digits = 3, format = "f")), as.numeric(formatC(Fvalue, digits = 3, format = "f")), as.numeric(formatC(pValue, digits = 3, format = "f"))))
colnames(boxMresult) = c("Test statistic", "F value", "p value")
rownames(boxMresult) = NULL
}else{boxMresult = NULL}
if("missclassifiedCases"  %in% statistics){
if(discriminantAnalysisMethod == "linear"){
predicted = as.numeric(levels(ldaResultCV$class)[ldaResultCV$class])
}
else if(discriminantAnalysisMethod == "quadratic"){
predicted = as.numeric(levels(qdaResultCV$class)[qdaResultCV$class])
}
else if(discriminantAnalysisMethod == "flexible"){
predicted = predict(fdaResult)
}
combinedDF = data.frame(continiousVars, actualClass =as.numeric(levels(responseVarFactor)[responseVarFactor]), predictedClass = predicted)
missClassifiedCasesResult = combinedDF[combinedDF$actual != combinedDF$predicted,]
names(missClassifiedCasesResult)[c(dim(missClassifiedCasesResult)[2]-1,dim(missClassifiedCasesResult)[2])] = c("Actual class", "Predicted class")
}else{missClassifiedCasesResult = NULL}
if("probabilities" %in% store){
if(discriminantAnalysisMethod == "linear"){
probabilities = as.data.frame((formatC(predict(ldaResult)$posterior, digits = 3, format = "f")))
}
if(discriminantAnalysisMethod == "quadratic"){
probabilities = as.data.frame((formatC(predict(qdaResult)$posterior, digits = 3, format = "f")))
}
if(discriminantAnalysisMethod == "flexible"){
probabilities = predict(fdaResult, type = "posterior")
rownames(probabilities) = 1:dim(probabilities)[1]
probabilities = as.data.frame(formatC(probabilities, digits = 3, format="f"))
}
}else{probabilities = NULL}
if("groupMembership" %in% store){
if(discriminantAnalysisMethod == "linear"){
groupMembership = data.frame(levels(predict(ldaResult)$class)[predict(ldaResult)$class])
colnames(groupMembership) = "Predicted class"
}
if(discriminantAnalysisMethod == "quadratic"){
groupMembership = data.frame(levels(predict(qdaResult)$class)[predict(qdaResult)$class])
colnames(groupMembership) = "Predicted class"
}
if(discriminantAnalysisMethod == "flexible"){
groupMembership = data.frame(levels(predict(fdaResult, type = "class"))[predict(fdaResult, type = "class")])
colnames(groupMembership) = "Predicted class"
}
} else{groupMembership = NULL}
if("discriminantScores" %in% store && discriminantAnalysisMethod == "quadratic"){
if(discriminantAnalysisMethod == "linear"){
discriminantScores = as.data.frame((formatC(predict(ldaResult)$x, digits = 3, format = "f")))
colnames(discriminantScores) = "Discriminant scores"
}
if(discriminantAnalysisMethod == "quadratic"){
"No discriminant scores"
}
if(discriminantAnalysisMethod == "flexible"){
discriminantScores = as.data.frame(formatC(predict(fdaResult, type = "variates")[,1], digits = 3, format = "f"))
rownames(discriminantScores) = 1:dim(discriminantScores)[1]
colnames(discriminantScores) = "Discriminant scores"
}
}else{discriminantScores = NULL}
if(correlations){
correlationResults = as.data.frame(formatC(cor(continiousVars), digits = 3, format = "f"))
correlationResults = cbind("#" = rownames(correlationResults), correlationResults)
rownames(correlationResults) = NULL
}else{correlationResults = NULL}
if(covariances){
covarianceResults = as.data.frame(formatC(cov(continiousVars), digits = 3, format = "f"))
covarianceResults = cbind("#" = rownames(covarianceResults), covarianceResults)
rownames(covarianceResults) = NULL
} else{covarianceResults = NULL}
if(descriptives){
obj = df
variable = colnames(continiousVars)
group.var = colnames(responseVar)
df[,group.var] = as.factor(df[,group.var])
descriptiveStatistics = lapply(variable, function(x) {
tmp = getDescriptiveResultsDiscriminantAnalysis(obj = obj, variable = x,  group.var = group.var,
confidence.level = confidenceLevel/100,
number.of.decimals = 3)
return(tmp)
})
names(descriptiveStatistics) = variable
}
result = list(tableResult = list(Descriptives = descriptiveStatistics, Correlation = correlationResults,
Covariance = covarianceResults),
testResult = list(ClassificationTable = classificationTable, CanonicalCoefficients = canonicalCoefficients,
ROCAnalysis = auc, classificationPerformanceAssessment = classificationPerformanceAssessment,
MultivariateNormality = mvnRes, BoxMTest = boxMresult,
MisclassifiedCases = missClassifiedCasesResult,
store = list(Probabilities = probabilities, GroupMembership = groupMembership,
DiscriminantScores = discriminantScores)),
plotResult = "under construction...")
result
mardiaTest()
mardiaTest
df = as.data.frame(cbind(responseVar, continiousVars))
df
splitGroup = split(df[,-1], df[,1])
mvn = lapply(X = splitGroup, FUN = function(x) mardiaTest(x, qqplot = FALSE))
mvn
mvn2 = lapply(X = mvn, FUN = function(x) formatC(c(x@g1p, x@chi.skew, x@p.value.skew,
x@g2p, x@z.kurtosis, x@p.value.kurt,
x@chi.small.skew, x@p.value.small), digits = 3, format = "f"))
mvnRes = data.frame(matrix(NA, nrow = length(splitGroup), ncol=10))
for(m in 1:length(splitGroup)){
mvnRes[m, 3:10] = mvn2[[m]]
mvnRes[m,1] = names(splitGroup)[m]
mvnRes[m,2] = paste(colnames(continiousVars), collapse = "-")
}
colnames(mvnRes) = c("Group","Variables", "g1p", "X2.skew", "p.value.skew", "g2p", "z.kurt", "p.value.kurt","X2.small.skew", "p.value.small")
mvnRes
class(mvnRes)
setwd("~/Google Drive/Turcosa Modules/Turcosa Modüller (Selcuk_13.05.2016)/Medical Statistics/ROC Analysis/")
data = read.table("mayo.txt",T)
write.table(data, "mayo2.txt", quote = F, sep = "T", dec = ",", sep = ";", row.names = F)
write.table(data, "mayo2.txt", quote = F, dec = ",", sep = ";", row.names = F)
write.table(data, "mayo2.txt", quote = F, dec = ".", sep = ";", row.names = F)
library(tensorflow)
# Create 100 phony x, y data points, y = x * 0.1 + 0.3
x_data <- runif(100, min=0, max=1)
y_data <- x_data * 0.1 + 0.3
# Try to find values for W and b that compute y_data = W * x_data + b
# (We know that W should be 0.1 and b 0.3, but TensorFlow will
# figure that out for us.)
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
b <- tf$Variable(tf$zeros(shape(1L)))
y <- W * x_data + b
# Minimize the mean squared errors.
loss <- tf$reduce_mean((y - y_data) ^ 2)
optimizer <- tf$train$GradientDescentOptimizer(0.5)
train <- optimizer$minimize(loss)
# Launch the graph and initialize the variables.
sess = tf$Session()
sess$run(tf$initialize_all_variables())
# Fit the line (Learns best fit is W: 0.1, b: 0.3)
for (step in 1:201) {
sess$run(train)
if (step %% 20 == 0)
cat(step, "-", sess$run(W), sess$run(b), "\n")
}
df = as.data.frame(cbind(responseVar, continiousVars))
splitGroup = split(df[,-1], df[,1])
splitGroup
install.packages("dnet")
library(dnet)
source("https://bioconductor.org/biocLite.R")
biocLite("supraHex")
library(dnet)
?dnet
load(ig.HPPA.RData)
data("ig.HPPA")
head(ig.HPPA)
data("TCGA_mutations")
head(TCGA_mutations)
data = TCGA_mutations
data@experimentData
data@experimentData@samples
data@featureData
data@featureData@data
head(data@featureData@data)
head(data@phenoData@data)
data@assayData$exprs
head(data@assayData$exprs)
data@phenoData
data@phenoData@varMetadata
data@phenoData@dimLabels
data@phenoData@.__classVersion__
dim(data@phenoData@data)
data = data@phenoData@data
getwd()
setwd("~/Dropbox/GSD/Studies/Web-Tools(Devel)/compSurv/")
write.table(data, "phenoData.txt", quote = F, sep = "\t", row.names = F)
citation()
